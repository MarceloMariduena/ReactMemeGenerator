{"version":3,"sources":["images/trollFace.png","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MemeGenerator","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImage","memeImages","handleChange","bind","assertThisInitialized","handleSubmit","inherits","createClass","key","value","_this2","fetch","then","reponse","json","response","memes","data","console","log","setState","event","_event$target","target","name","defineProperty","preventDefault","randomNum","Math","floor","random","length","randomMemeImage","url","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","src","alt","Component","App","trollFace","MemeGenerator_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.996caf14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trollFace.c81ac51c.png\";","import React, { Component } from 'react';\r\nimport '../css/MemeGenerator.css';\r\n\r\nexport class MemeGenerator extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImage: \"https://media.tenor.com/images/a9adda18a785b1cb85eec04517d99178/tenor.gif\",\r\n            memeImages: []\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(reponse => reponse.json())\r\n            .then(response => {\r\n                const {memes} = response.data;\r\n                console.log(memes[0]);\r\n                this.setState({ memeImages: memes});\r\n            })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name, value} = event.target;\r\n        this.setState({ [name]: value});\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        const randomNum = Math.floor(Math.random() * this.state.memeImages.length);\r\n        const randomMemeImage = this.state.memeImages[randomNum].url;\r\n        this.setState({ randomImage: randomMemeImage});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form-group\" onSubmit={this.handleSubmit}>\r\n                <button className=\"form-control btn btn-success mb-2\">Random Meme</button>\r\n                    <input className=\"form-control mb-2\"\r\n                        type = \"text\" \r\n                        name = \"topText\"\r\n                        placeholder = \"Top text\"\r\n                        value = {this.state.topText}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                    <input className=\"form-control mb-2\"\r\n                        type = \"text\" \r\n                        name = \"bottomText\"\r\n                        placeholder = \"Bottom text\"\r\n                        value = {this.state.bottomText}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                </form>\r\n                <div className=\"container\">\r\n                    <img className=\"memeImage\" src={this.state.randomImage} alt=\"\"/>\r\n                    <h2 className=\"topText\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottomText\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport trollFace from './images/trollFace.png';\nimport './App.css';\n\nimport { MemeGenerator } from './components/MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={trollFace} className=\"App-logo\" alt=\"logo\" />\n        <br/>\n        <MemeGenerator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}